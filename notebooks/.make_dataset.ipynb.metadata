{"timestamp": 1646532224.60853, "stored_source_code": "# import click\n# import logging\nimport pandas as pd\nfrom sklearn import datasets\nfrom pathlib import Path\nfrom dotenv import find_dotenv, load_dotenv\n# declare a list tasks whose products you want to use as inputs\nupstream = None\n\ndef make_dataset(product):\n\n    d = datasets.load_iris()\n    df = pd.DataFrame(d['data'])\n    df.columns = d['feature_names']\n    df['target'] = d['target']\n\n    Path(str(product['data'])).parent.mkdir(exist_ok=True, parents=True)\n\n    df.to_parquet(str(product['data']))\nmake_dataset(product)\n\n@click.command()\n@click.argument('input_filepath', type=click.Path(exists=True))\n@click.argument('output_filepath', type=click.Path())\ndef main(input_filepath, output_filepath):\n    \"\"\" Runs data processing scripts to turn raw data from (../raw) into\n        cleaned data ready to be analyzed (saved in ../processed).\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.info('making final data set from raw data')\n\n\nif __name__ == '__main__':\n    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    logging.basicConfig(level=logging.INFO, format=log_fmt)\n\n    # not used in this stub but often useful for finding various files\n    project_dir = Path(__file__).resolve().parents[2]\n\n    # find .env automagically by walking up directories until it's found, then\n    # load up the .env entries as environment variables\n    load_dotenv(find_dotenv())\n    make_dataset(product)\n\n    main()", "params": {}}